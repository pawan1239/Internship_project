#text=input("""Enter the string that needs to be tagged:: """)
import hindi_name
import adjective
import demonstrative_pronoun
import determiner
import preposition
import possesive_pronoun
import punctuations
import pronoun
import adverb
import negation
import cardinal_number
import ordinal_number
import verb
import cunjunctive_verb
import question_word
import conjunct
import verbal_noun
res_individual_testing_six=''
res_individual_testing_four=''
res_individual_testing_five=''
res_individual_prefix_three=''
res_individual_testing_three=''
r=''
r_one=''
r3=''
r3_one=''
r3_three=''
r4=''
r4_one=''
r7=''
r7_cj=''
r7_cj_one=''
r2_three=''
text1_list=[]
m=[]
m_unknown=[]
flag=0
#Function for printing the unknown tagged word at end of each sentence
def printing_unknown(l2):
    for a2 in range(0,len(l2)):
        if l2[a2]=='UNK':
            m_unknown.append(l2[a2-2])

def rule_function():
    # Applying rule 1 for adjective && demonstrative_pronoun && possesive pronoun
        for p in range(0, len(l)):
            if (l[p] == 'JJ' or l[p] == 'Demonstrative_Pro' or l[p] == 'Possesive_pro' or l[p] == 'ordinal_number' or l[p] == 'cardinal_number'):
                if (l[p + 3] == 'UNK' or l[p + 3] == 'JJ'):
                    l[p + 3] = 'N'
    # Applying rule 2 related to postposition
        for p in range(0, len(l)):
            if l[p] == 'Preposition' and l[p - 3] != 'Preposition':
                if (l[p - 3] == 'UNK' or l[p - 3] == 'JJ'):
                    l[p - 3] = 'N'
    # Applying rule 3 related to demonstrative pronoun and adjective && Quantifier and adjective
        for p in range(0, len(l)):
            if (l[p] == 'Demonstrative_Pro' and l[p + 3] == 'JJ') or (l[p] == 'Quantifier' and l[p + 3] == 'JJ'):
                if (l[p + 6] == 'UNK'):
                    l[p + 6] = 'N'


#Functions for maintaining the space between puntuations and words
def check(l):
   flag=0
   text1_list=list(l)
   len1=len(text1_list)-1
   #check_middle(text1_list)

   if text1_list[len1]==',' or text1_list[len1]=='?' or text1_list[len1]=='-' or text1_list[len1]=='!' or text1_list[len1]==':' or text1_list[len1]==';':
      text1_list.insert(len1,' ')
      #print(text1_list)
      org_text=''.join(text1_list)
      #print(org_text)
      m.append(org_text)
      m.append(' ')
   else:
      #if flag==0:
        m.append(l)
        m.append(' ')
def check_last(lt):
   lt_list=list(lt)
   l3=len(lt_list)-1
   lt_list.insert(l3,' ')
   org_text3=''.join(lt_list)
   m.append(org_text3)
filepath = '/home/pawan/Desktop/sample.txt'
l_char=[]
l_char_2=[]
l_char_3=[]
l_char_4=[]
l_char_5=[]
l_char_individual_testing_1=[]
#Functions for tagging the word adjective ending with 'ीय' like भारतीय, केंद्रीय
def individual_testing_1(word2):
   for char in word2:
      l_char_individual_testing_1.append(char)
    #Tagged function for 'ता'
def split1(word1):
   for char in word1:
      l_char.append(char)
def split2(word2):
   for char in word2:
      l_char_2.append(char)
    #Tagged function for 'ीं'
def split3(word3):
   for char in word3:
      l_char_3.append(char)
def split4(word4):
   for char in word4:
      l_char_4.append(char)
       # Function for tagging the verb before conjunct
def split5(word5):
    l_char_5.clear()
    for char in word5:
      l_char_5.append(char)
for text in open(filepath):
   # Tagging the verb with 'ता'
    token2=text.split()
    length2=len(token2)
    for i in range(0, length2 - 1):
        check(token2[i])
    if length2>=1:
        check_last(token2[length2 - 1])
    org_text_final = ''.join(m)
    token=org_text_final.split()
    element_length=len(token)-3
    element_length_2=len(token)-2
    element_length_3=len(token)-3
    element_length_4=len(token)-4
    #print(element_length_4)
    if element_length>=3:
        split1(token[element_length])
    if element_length_2>=2:
        split2(token[element_length_2])
    if element_length_3>=3:
        split3(token[element_length_3])
    if element_length_4>=4:
        split4(token[element_length_4])
    token_length=len(token)

    l=[]
    for k in range(0,len(token)):
        if token[k] in adjective.dict_adjective.keys():
            l.append(token[k])
            l.append('/')
            l.append(adjective.dict_adjective[token[k]])
        elif token[k] in demonstrative_pronoun.dict_demonstrative_pronoun.keys():
            l.append(token[k])
            l.append('/')
            l.append(demonstrative_pronoun.dict_demonstrative_pronoun[token[k]])
        elif token[k] in determiner.dict_determiner.keys():
            l.append(token[k])
            l.append('/')
            l.append(determiner.dict_determiner[token[k]])
        elif token[k] in preposition.dict_preposition.keys():
            l.append(token[k])
            l.append('/')
            l.append(preposition.dict_preposition[token[k]])
        elif token[k] in possesive_pronoun.dict_possesive_pronoun.keys():
            l.append(token[k])
            l.append('/')
            l.append(possesive_pronoun.dict_possesive_pronoun[token[k]])
        elif token[k] in punctuations.dict_puntuations.keys():
            l.append(token[k])
            l.append('/')
            l.append(punctuations.dict_puntuations[token[k]])
        elif token[k] in pronoun.dict_pronoun.keys():
            l.append(token[k])
            l.append('/')
            l.append(pronoun.dict_pronoun[token[k]])
        elif token[k] in adverb.dict_adverbs.keys():
            l.append(token[k])
            l.append('/')
            l.append(adverb.dict_adverbs[token[k]])
        elif token[k] in negation.dict_negations.keys():
            l.append(token[k])
            l.append('/')
            l.append(negation.dict_negations[token[k]])
        elif token[k] in cardinal_number.dict_cardinal_number.keys():
            l.append(token[k])
            l.append('/')
            l.append(cardinal_number.dict_cardinal_number[token[k]])
        elif token[k] in ordinal_number.dict_ordinal_number.keys():
            l.append(token[k])
            l.append('/')
            l.append(ordinal_number.dict_ordinal_number[token[k]])
        elif token[k] in verb.dict_verb.keys():
            l.append(token[k])
            l.append('/')
            l.append(verb.dict_verb[token[k]])
        elif token[k] in cunjunctive_verb.dict_conjunctive_verb.keys():
            l.append(token[k])
            l.append('/')
            l.append(cunjunctive_verb.dict_conjunctive_verb[token[k]])
        elif token[k] in question_word.dict_question_word.keys():
            l.append(token[k])
            l.append('/')
            l.append(question_word.dict_question_word[token[k]])
        elif token[k] in conjunct.dict_conjunct.keys():
            l.append(token[k])
            l.append('/')
            l.append(conjunct.dict_conjunct[token[k]])
        elif token[k] in verbal_noun.dict_verbal_noun.keys():
            l.append(token[k])
            l.append('/')
            l.append(verbal_noun.dict_verbal_noun[token[k]])
        elif token[k] in hindi_name.dict_hindi_name_1.keys():
            l.append(token[k])
            l.append('/')
            l.append(hindi_name.dict_hindi_name_1[token[k]])
        else:
            l.append(token[k])
            l.append('/')
            l.append('UNK')
    rule_function()


    #################################################################### word Formation Rule
    for k1 in range (0,len(token)-2):
        individual_testing_1(token[k1])
        len_individual_testing_1=len(l_char_individual_testing_1)-1
        m1=len_individual_testing_1
        for k2 in range(0,m1+1):####  Tagging the decimal number like 88.7, 99.2
            if l_char_individual_testing_1[k2]=='.' or l_char_individual_testing_1[k2]==u'\u0967'or l_char_individual_testing_1[k2]==u'\u0968'or l_char_individual_testing_1[k2]==u'\u0969'or l_char_individual_testing_1[k2]==u'\u096A'or l_char_individual_testing_1[k2]==u'\u096B'or l_char_individual_testing_1[k2]==u'\u096C'or l_char_individual_testing_1[k2]==u'\u096D'or l_char_individual_testing_1[k2]==u'\u096E'or l_char_individual_testing_1[k2]==u'\u096F'or l_char_individual_testing_1[k2]=='1'or l_char_individual_testing_1[k2]=='2'or l_char_individual_testing_1[k2]=='3'or l_char_individual_testing_1[k2]=='4'or l_char_individual_testing_1[k2]=='5'or l_char_individual_testing_1[k2]=='6'or l_char_individual_testing_1[k2]=='7'or l_char_individual_testing_1[k2]=='8'or l_char_individual_testing_1[k2]=='9':
                l[3 * k1 + 2] = 'Cardinal_number'

        res_individual_testing_one=l_char_individual_testing_1[m1]
        res_individual_prefix_one=l_char_individual_testing_1[0]
        res_individual_testing_1=l_char_individual_testing_1[len_individual_testing_1-1]+l_char_individual_testing_1[len_individual_testing_1]
        if(m1>=1):
            res_individual_prefix_1=l_char_individual_testing_1[0]+l_char_individual_testing_1[1]
        if (m1>=2):
            res_individual_testing_three=l_char_individual_testing_1[m1-2]+l_char_individual_testing_1[m1-1]+l_char_individual_testing_1[m1]
            res_individual_prefix_three=l_char_individual_testing_1[0]+l_char_individual_testing_1[1]+l_char_individual_testing_1[2]
        if (m1>=3):
            res_individual_testing_four=l_char_individual_testing_1[m1-3]+l_char_individual_testing_1[m1-2]+l_char_individual_testing_1[m1-1]+l_char_individual_testing_1[m1]
        if(m1>=4):
            res_individual_testing_five=l_char_individual_testing_1[m1-4]+l_char_individual_testing_1[m1-3]+l_char_individual_testing_1[m1-2]+l_char_individual_testing_1[m1-1]+l_char_individual_testing_1[m1]
        if(m1>=5):
            res_individual_testing_six=l_char_individual_testing_1[m1-5]+l_char_individual_testing_1[m1-4]+l_char_individual_testing_1[m1-3]+l_char_individual_testing_1[m1-2]+l_char_individual_testing_1[m1-1]+l_char_individual_testing_1[m1]
        if(m1>=7):
            res_individual_testing_eight=l_char_individual_testing_1[m1-7]+l_char_individual_testing_1[m1-6]+l_char_individual_testing_1[m1-5]+l_char_individual_testing_1[m1-4]+l_char_individual_testing_1[m1-3]+l_char_individual_testing_1[m1-2]+l_char_individual_testing_1[m1-1]+l_char_individual_testing_1[m1]
        if(res_individual_testing_1=='ीय'or res_individual_prefix_1=='सु' or res_individual_prefix_1=='कम' or res_individual_prefix_three=='अत्' or res_individual_prefix_one=='अ' or res_individual_prefix_1=='अध' or res_individual_prefix_1=='भर'  or res_individual_prefix_1=='अन' or res_individual_prefix_one=='ब' or res_individual_prefix_1=='कम' or res_individual_testing_three=='ालय' or res_individual_testing_three=='शील' or res_individual_testing_four=='शाली' or res_individual_testing_five=='प्रिय'  or res_individual_testing_five=='पूर्ण' or res_individual_testing_1=='मय' or res_individual_testing_three=='मान' or res_individual_testing_three=='जनक' or res_individual_testing_three=='बान' or res_individual_testing_1=='िक' or  res_individual_testing_three=='लित' or  res_individual_testing_three=='चित' or res_individual_testing_three=='कृत'  or res_individual_testing_three=='दार' or res_individual_testing_three=='दाई' or res_individual_testing_four=='दायी' or res_individual_testing_five=='दायिक' or res_individual_testing_three=='देह' or res_individual_testing_three=='ीला'  or res_individual_testing_1=='ीण' or res_individual_testing_1=='ीन' or res_individual_testing_three=='नाक' or res_individual_testing_1=='ाऊ' or res_individual_testing_three=='वान' or res_individual_testing_1=='वर' or res_individual_testing_1=='कड़' or res_individual_testing_1=='तम' or res_individual_testing_three=='हीन' or res_individual_testing_1=='तः' or res_individual_testing_four=='त्मक' or res_individual_testing_1=='गत' or res_individual_testing_five=='कालीन' or res_individual_testing_five=='कालिक' or res_individual_testing_four=='कारी'):
            if l[3*k1+2]=='UNK':
                l[3*k1+2]='JJ'
        if(res_individual_testing_one=='क' or res_individual_prefix_three=='दुर' or res_individual_prefix_1=='नि' or res_individual_prefix_three=='परा' or res_individual_prefix_three=='परि' or res_individual_prefix_three=='फ़ी' or res_individual_prefix_three=='अधि' or res_individual_prefix_1=='उप' or res_individual_prefix_three=='उत्' or res_individual_prefix_one=='आ' or res_individual_prefix_1=='अप' or res_individual_prefix_1=='अव' or res_individual_prefix_three=='अनु' or res_individual_prefix_three=='अधि' or res_individual_prefix_three=='अभि' or res_individual_prefix_1=='चौ' or res_individual_prefix_1=='कु' or res_individual_prefix_1=='हर' or res_individual_prefix_1=='सर' or res_individual_prefix_1=='हम' or res_individual_testing_three=='योग' or res_individual_testing_three=='बंध' or res_individual_testing_three=='कों' or res_individual_testing_1=='पद' or res_individual_testing_four=='मंडल' or res_individual_testing_four=='शासन' or res_individual_testing_five=='तंत्र' or res_individual_testing_five=='क्रमण'or res_individual_testing_four=='क्रम' or res_individual_testing_four=='पत्र' or res_individual_testing_three=='वली' or res_individual_testing_three=='ञान' or res_individual_testing_five=='ख़ाना' or res_individual_testing_four=='ख़ाना' or res_individual_testing_one=='त' or res_individual_testing_one=='ण'  or res_individual_testing_three=='ाहट' or res_individual_testing_three=='ावट' or res_individual_testing_three=='ासत' or res_individual_testing_three=='ायत' or res_individual_testing_three=='ियत' or res_individual_testing_1=='ाव' or res_individual_testing_three=='ावा' or res_individual_testing_four=='गीरी' or res_individual_testing_three=='कार' or res_individual_testing_1=='पा' or res_individual_testing_1=='पन' or res_individual_testing_1=='ता' or res_individual_testing_1=='ान' or res_individual_testing_1=='ास' or res_individual_testing_three=='ौती' or res_individual_testing_three=='ौता' or res_individual_testing_three=='र्य' or res_individual_testing_1=='िश' or res_individual_testing_four=='बाजी' or res_individual_testing_three=='बाज' or res_individual_testing_four=='दारी' or res_individual_testing_four=='दाता' or res_individual_testing_four=='धारी' or res_individual_testing_1=='गर' or res_individual_testing_four=='गारी'  or res_individual_testing_three=='कार' or res_individual_testing_1=='ार' or res_individual_testing_1=='री' or res_individual_testing_1=='ड़ी'):
            if l[3*k1+2]=='UNK':
                l[3*k1+2]='N'
        if(res_individual_testing_six=='पूर्वक'):
            if l[3*k1+2]=='UNK' or l[3*k1+2]=='N':
                l[3*k1+2]='Adverb'
        if(res_individual_testing_1=='कर'):
            if l[3*k1+2]=='UNK':
                l[3*k1+2]='VB'
        if(res_individual_testing_1=='एं' or res_individual_testing_one=='ए'):
            if l[3*k1+2]=='UNK' and l[3*k1+2]!='VB':
                l[3*k1+2]='N'


        l_char_individual_testing_1.clear()
       # Verb tagging rule at the end of sentence
    #Tagging the verb ending with 'ता'
    m.clear()
    n=len(l_char)-1
    if n>=1:
        r=l_char[n-1]+l_char[n]
    if n>=0:
        r_one=l_char[n]
    x1=len(l)
    x2=(element_length*3+2)
    x2_one=(element_length_2*3+2)
    x3=(element_length_3*3+2)
    x4=(element_length_4 * 3 + 2)
    if r=='ता' or r_one=='ए' or r_one==u'\u0947' or r=='एं'  or r=='ईं'  or r=='ओ' or r_one== 'ी' or  r=='ती' or r=='ते' or r=='ना' or r=='यें' or r=='गे' or r_one=='ए'  or r_one==' ी':
        if 0 <= x2 < x1 : ## Preventing from error i.e list out of index
            if l[element_length*3+2]!='QW'and l[element_length*3+2]!='Pronoun' and l[element_length*3+2]!='Demonstrative_Pro' and l[element_length*3+2]!='NEG' and l[element_length_2*3+2]!='JJ' and l[element_length_2*3+2]!='ordinal_number' and l[element_length*3+2]!='Adverb' and l[element_length*3+2]!='Preposition'and l[element_length*3+2]!='N':
                l[element_length*3+2]='VB1'

    n2=len(l_char_2)-1
    if n2>=1:
        r2=l_char_2[n2-1]+l_char_2[n2]
    if n2>=2:
        r2_three=l_char_2[n2-2]+l_char_2[n2-1]+l_char_2[n2]
    r2_one=l_char_2[n2]

    #if r2=='ता' or r2_three=='रें'or r2_three=='लें' or r2_one==u'\u094B' or r2=='ना' or r2=='ते' or r2_one=='ए' or r2=='एं' or r2=='या'  or r2=='ईं' or r2=='थी' or r2=='ले' or r2=='हे' or r2_one=='ी' or r2=='खो' or r2=='है' or r2=='का' or r2_one=='ए' or r2_one=='ा' or r2=='गी' or r2=='गा' or r2=='ये' or r2=='आ' or r2_one=='ओ' or r2_one=='ई' or r2=='खा' or r2=='ए' or r2=='गे' or r2=='ये':
    if 0 <= x2_one < x1:
        if l[element_length_2*3+2]!='QW' and l[element_length_2*3+2]!='Pronoun' and l[element_length_2*3+2]!='Demonstrative_Pro': # and l[element_length_2*3+2]!='JJ' and l[element_length_2*3+2]!='ordinal_number' and l[element_length_2*3+2]!='Adverb' and l[element_length_2*3+2]!='Preposition'and l[element_length_2*3+2]!='N' :
            l[element_length_2*3+2]='VB2'
    n3=len(l_char_3)-1
    if n3>=1:
        r3=l_char_3[n3-1]+l_char_3[n3]
    if n3>=0:
        r3_one=l_char_3[n3]
    if n3>=2:
        r3_three=l_char_3[n3-2]+l_char_3[n3-1]+l_char_3[n3]
    if r3=='ीं' or r3_one==' ी' or r3=='ही' or r3=='पे' or r3=='खा' or r3_three=='तें' or r3=='हा' or r3_three=='यें' or r3_three=='लें':
        if 0 <= x3 < x1:
          if l[element_length_3*3+2]!='QW' and l[element_length_3*3+2]!='JJ' and l[element_length_3*3+2]!='ordinal_number' and l[element_length_3*3+2]!='Adverb' and l[element_length_3*3+2]!='Preposition' and l[element_length_3*3+2]!='N':
              l[element_length_3*3+2]='VB3'
    n4=len(l_char_4)-1
    if n4>=1:
        r4=l_char_4[n4-1]+l_char_4[n4]
    if n4>=0:
        r4_one=l_char_4[n4]
    if r4=='ते' or r4=='ना' or r4_one=='ी' or r4=='गा' or r4_one=='ो':
        if 0 <= x4 <x1:
            if l[element_length_4 * 3 + 2] != 'QW' and l[element_length_4*3+2]!='JJ' and l[element_length_2*3+2]!='ordinal_number' and l[element_length_4 * 3 + 2] != 'Adverb' and l[element_length_4 * 3 + 2] != 'Preposition' and l[element_length_4*3+2]!='N':
                l[element_length_4*3+2]='VB4'

    # Verb tagging rule before the conjunct
    for k3 in range(0,len(l)):
        if (l[k3]=='Conjunct' or l[k3]=='PU' or l[k3]=='VB') and k3!=len(l)-1:
            r5=l[k3-5]
            r6=l[k3-8]
            if k3>=11:
                r7=l[k3-11]
            split5(r5)
            len_conjunct=len(l_char_5)-1
            r5_cj=l_char_5[len_conjunct-1]+l_char_5[len_conjunct]
            r5_cj_one=l_char_5[len_conjunct]
            if r5_cj== 'ता' or r5_cj=='ते' or r5_cj == 'या' or r5_cj == 'ईं' or r5_cj == 'थी' or r5_cj == 'ले' or r5_cj == 'हे' or r5_cj_one == 'ी' or r5_cj == 'खो' or r5_cj == 'है' or r5_cj == 'का' or r5_cj_one == 'ए' or r5_cj_one == 'ा' or r5_cj == 'गी' or r5_cj_one == 'गा' or r5_cj == 'ये' or r5_cj == 'आ' or r5_cj_one== 'ओ' or r5_cj_one == 'ई' or r5_cj == 'खा' or r5_cj == 'ए' or r5_cj == 'गे' or r5_cj == 'ये':
                if l[k3-3] != 'QW' and l[k3-3]!='Adverb' and l[k3-3]!='Preposition' and l[k3-3]!='N' and l[k3-3]!='JJ':
                    l[k3-3] = 'VB'
            split5(r6)
            len_conjunct_1=len(l_char_5)-1
            r6_cj = l_char_5[len_conjunct_1 - 1] + l_char_5[len_conjunct_1]
            r6_cj_one = l_char_5[len_conjunct_1]
            r6_cj_three=''
            if len_conjunct_1>=2:
                r6_cj_three=l_char_5[len_conjunct_1-2]+l_char_5[len_conjunct_1-1]+l_char_5[len_conjunct_1]
            if r6_cj=='ीं' or r6_cj=='या' or r6_cj=='के' or r6_cj_one==' ी' or r6_cj=='ही' or r6_cj=='पे' or r6_cj=='खा' or r6_cj_three=='तें' or r6_cj=='हा' or r6_cj_three=='यें' or r6_cj_three=='लें' or r6_cj == 'ता' or r6_cj == 'या' or r6_cj == 'ईं' or r6_cj == 'ओ' or r6_cj_one == 'ी' or r6_cj == 'ती' or r6_cj == 'ते' or r6_cj == 'ना' or r6_cj == 'यें' or r6_cj == 'गे' or r6_cj_one == 'ए' or r6_cj_one == ' ी':
                if k3>=6:
                    if l[k3-6] != 'QW' and l[k3-6]!='Adverb' and l[k3-6]!='Preposition' and l[k3-6]!='N' and l[k3-6]!='JJ':
                        l[k3-6] = 'VB'
            split5(r7)
            len_conjunct_2 = len(l_char_5) - 1
            if len_conjunct_2>=1:
                r7_cj = l_char_5[len_conjunct_2 - 1] + l_char_5[len_conjunct_2]
            if len_conjunct_2>=0:
                r7_cj_one = l_char_5[len_conjunct_2]
            r7_cj_three = ''
            if len_conjunct_2>= 2:
                r7_cj_three = l_char_5[len_conjunct_2 - 2] + l_char_5[len_conjunct_2 - 1] + l_char_5[len_conjunct_2]
            if r7_cj == 'ीं' or r7_cj == 'या' or r7_cj_one == ' ी' or r7_cj == 'ही' or r7_cj == 'पे' or r7_cj == 'खा' or r7_cj_three == 'तें' or r7_cj == 'हा' or r7_cj_three == 'यें' or r7_cj_three == 'लें' or r7_cj == 'ता' or r7_cj == 'या' or r7_cj == 'ईं' or r7_cj == 'ओ' or r7_cj_one == 'ी' or r7_cj == 'ती' or r7_cj == 'ते' or r7_cj == 'ना' or r7_cj == 'यें' or r7_cj == 'गे' or r7_cj_one == 'ए' or r7_cj_one == ' ी':
                if k3>=9:
                    if l[k3 - 9] != 'QW' and l[k3-9]!='Adverb' and l[k3-9]!='Preposition' and l[k3-9]!='N' and l[k3-9]!='JJ':
                        l[k3 - 9] = 'VB'

    printing_unknown(l)
    print(m_unknown)
    m_unknown.clear()
#  for printing in output file
    count=0
    count1=0
    c=0
    for g in range(0,len(l)):
        with open('/home/pawan/Desktop/output.txt', 'a') as filehandle:
            a=l[g]
            filehandle.write(a)
            count1=count1+1
            c=c+1
            if count1==3:
                a=','
                filehandle.write(a)
                count1=0
                c=c+1
            if c==token_length*4:
                printing_unknown(l)
                filehandle.write('[')
                for b in range(0,len(m_unknown)):###### Printing unknown words in output file
                    filehandle.write(m_unknown[b])
                    filehandle.write(',')
                filehandle.write(']')
                m_unknown.clear()
                filehandle.write('\n')
    #for printing in terminals
    for g in range(0,len(l)):
        print(l[g],end='')
        count=count+1
        if count==3:
            print(',',end='')
            count=0
    print('\n')












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































